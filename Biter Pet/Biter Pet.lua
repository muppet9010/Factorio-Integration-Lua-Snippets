/sc local playerName = "muppet9010"; local biterName = "%%USERNAME%%"; local biterNameColor = {1.0,1.0,1.0,1.0}; local biterType = "behemoth-biter"; local returnRange=5; local followRange=10; local combatMaxRange=50;
local player = game.get_player(playerName); if player == nil then; return; end;
local surface, playerPosition, debug = player.surface, player.position, false;
local biterSpawnPosition = surface.find_non_colliding_position(biterType, playerPosition, 10, 0.1); if biterSpawnPosition == nil then; return; end;
local biter = surface.create_entity({name=biterType, position=biterSpawnPosition, force=player.force}); if biter == nil then; return; end; if biterName ~= nil and biterName ~= "" then; rendering.draw_text({text=biterName, surface=surface, target=biter, color=biterNameColor}); else; biterName = ""; end;
local followPlayerFunc = function(data);
    data = data --[[@as BiterPet_Data]]
    if not data.biter.valid then; if data.biterName ~= "" then; data.player.print("RIP " .. data.biterName .. ", they were a loyal dumb beast to the end" .. (data.debug and " - " .. game.tick or "")); end; return; end;
    if not data.player.valid then; return; end;
    if data.player.character == nil then;
        if data.hasOwner then; if data.biterName ~= "" then; data.player.print("good " .. data.biterName .. ", you protect my corpse until I return" .. (data.debug and " - " .. game.tick or "")); end; data.hasOwner = false; end;
        remote.call("muppet_streamer", "add_delayed_lua", 60, data.followPlayerFuncDump, data); return;
    end;
    local targetEntity = data.player.vehicle or data.player.character; if targetEntity == nil then; return; end;
    local biterPosition, targetEntityPosition = data.biter.position, targetEntity.position; local biterPlayerDistance = (((biterPosition.x - targetEntityPosition.x) ^ 2) + ((biterPosition.y - targetEntityPosition.y) ^ 2)) ^ 0.5;
    if not data.hasOwner then;
        if biterPlayerDistance < data.followRange then;
            if data.biterName ~= "" then; data.player.print("I have returned for you " .. data.biterName .. (data.debug and " - " .. game.tick or "")); end; data.hasOwner = true; data.calledBack = false;
        else;
            remote.call("muppet_streamer", "add_delayed_lua", 60, data.followPlayerFuncDump, data); return;
        end;
    end;
    if biterPlayerDistance > data.followRange then;
        local distractionCommand = data.biter.distraction_command;
        if distractionCommand ~= nil then;
            if biterPlayerDistance > data.combatMaxRange and not data.calledBack then;
                data.biter.set_command({type=defines.command.go_to_location, destination_entity=targetEntity, radius=data.returnRange, distraction=defines.distraction.none});
                if data.biterName ~= "" then; data.player.print("here " .. data.biterName .. ", leave them be" .. (data.debug and " - " .. game.tick or "")); end; data.calledBack = true;
            end;
        elseif not data.calledBack then;
            data.biter.set_command({type=defines.command.go_to_location, destination_entity=targetEntity, radius=data.returnRange});
            if data.debug then; data.player.print("follow me - TEST" .. " - " .. game.tick); end;
        end;
    elseif biterPlayerDistance < data.followRange and data.calledBack then;
        if data.biterName ~= "" then; data.player.print(data.biterName .. " who's a good biter then ... yes you are" .. (data.debug and " - " .. game.tick or "")); end; data.calledBack = false;
    end;
    remote.call("muppet_streamer", "add_delayed_lua", 60, data.followPlayerFuncDump, data); return;
end;
local data = {player=player, biter=biter, followPlayerFuncDump=string.dump(followPlayerFunc), returnRange=returnRange, followRange=followRange, combatMaxRange=combatMaxRange, calledBack=false, biterName=biterName, hasOwner=true, debug = debug };
remote.call("muppet_streamer", "add_delayed_lua", 0, string.dump(followPlayerFunc), data);